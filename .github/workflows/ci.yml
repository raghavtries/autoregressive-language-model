name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov

    # - name: Lint with ruff
    #   run: |
    #     ruff check src/ tests/ scripts/
    #     ruff format --check src/ tests/ scripts/

    # - name: Type check with mypy
    #   run: |
    #     mypy src/ --ignore-missing-imports --no-strict-optional

    - name: Run unit tests
      run: |
        PYTHONPATH=src pytest tests/ -v --cov=src --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  smoke-train:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create test data
      run: |
        mkdir -p data
        echo "Hello world! This is a test sentence. How are you today? I hope you are doing well. This is some sample text for training our language model. We need enough text to create a meaningful dataset for testing purposes." > data/train.txt
        echo "This is validation text. It should be different from training text. We use this to evaluate our model performance." > data/val.txt

    - name: Create smoke test config
      run: |
        cat > configs/smoke_test.yaml << 'EOF'
        model:
          vocab_size: 50
          d_model: 64
          n_layers: 2
          n_heads: 4
          d_ff: 128
          dropout: 0.1
          block_size: 16

        train:
          learning_rate: 3e-4
          warmup_steps: 5
          max_steps: 100
          batch_size: 2
          grad_accumulation_steps: 1
          grad_clip: 1.0
          amp: false
          use_compile: false
          use_gradient_checkpointing: false
          log_interval: 10
          eval_interval: 50
          save_interval: 50

        data:
          train_path: data/train.txt
          val_path: data/val.txt
          block_size: 16

        tokenizer:
          vocab_size: 50
        EOF

    - name: Run smoke training
      run: |
        PYTHONPATH=src python src/llm_ar/train.py --config configs/smoke_test.yaml

    - name: Run evaluation
      run: |
        PYTHONPATH=src python src/llm_ar/eval.py --checkpoint logs/final_model.pt --config configs/smoke_test.yaml

    - name: Test text generation
      run: |
        PYTHONPATH=src python src/llm_ar/generate.py --checkpoint logs/final_model.pt --config configs/smoke_test.yaml --prompt "Hello" --max_new_tokens 10 --temperature 0.8

    - name: Upload training artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: training-artifacts
        path: |
          logs/
          data/
        retention-days: 7

    - name: Upload model artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: model-artifacts
        path: |
          logs/*.pt
        retention-days: 7 